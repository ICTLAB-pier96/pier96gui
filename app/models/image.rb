# @author = Luuk Tersmette
# Image extends the ActiveRecord class, making it a Rails model and acting as the model in the Model View Controller setup.
# Extra methods are added for adding a new instance of the Image model to the database and performing extra steps.
# Used by, images_controller.rb, image_build_worker.rb, all views in app/views/images/
class Image < ActiveRecord::Base
	include Common::DockerInteraction
  include Common::Debugging

	# This method adds a reference to a image from the Docker Hub to the database. Before that it checks if the image actually exists.
	# Used by: images_controller.rb
	# * *Args*    :
	#   - +repo+ -> the repository of the image. [String]
	#   - +image_name+ -> the name of the image. [String]
	# * *Returns* :
	#   - The status of the process of adding the image, and also a optional status message. Hashmap
	# * *Raises* :
	#   - Nothing 
	def add_from_hub(repo, image_name)
    prepare_docker
		self.status = -2
        if repo != ""
          if repo.length < 2
            return {"status" => false, "notice" => "Repository length must be no fewer then 2 characters in length if entered."}
          else
            search_term = repo + '/' + image_name
          end
        else
          search_term = image_name
        end
        search_results = Docker::Image.search('term' => search_term)
        match_found = false
        search_results.each do |search_result|
          if search_result.id == search_term
            match_found = true
            break
          end
        end
        if match_found
          if self.save
            log("succeeded to save hub image with tags: " + repo + "/" + image_name, "info")
          	return {"status" => true, "notice" => ""}
          else
            log("failed to save hub image with tags: " + repo + "/" + image_name, "error")
            return {"status" => false, "notice" => ""}
          end
        else
         	return {"status" => false, "notice" => "Image not found in Docker Hub"}
        end
	end

	# This method adds a reference to a image from the Docker Hub to the database.
	# After that it tries authenticating to the Docker Hub with the user provided credentials.
	# Subsequently, a user provided tar file containing the Docker file and some optional files are saved in server storage.
	# Finally, image_build_worker is started, which uses the tar file contents to build the image and push it to the Docker Hub.
	# Used by: images_controller.rb
	# * *Args*    :
	#   - +repo+ -> the repository of the image. [String]
	#   - +repo_credentials+ -> credentials of the Docker Hub for pushing the image to it. Hashmap
	#   - +image_name+ -> the name of the image. [String]
	#   - +file_name+ -> the name of the uploaded tar file. [String]
	#   - +upload_parameters+ -> information about the uploaded file, generated by the built in Rails functionality [String]
	# * *Returns* :
	#   - The status of the process of adding the image, and also a optional status message. Hashmap
	# * *Raises* :
	#   - Nothing 
	def add_from_file(repo, repo_credentials, image_name, file_name, upload_parameters)
    prepare_docker

    self.filename = file_name
    self.status = -1

    if self.save
      image_id = self.id
      authenticate_status = authenticate_docker(repo_credentials['username'], repo_credentials['password'], repo_credentials['email'])
      file_status = false
      if authenticate_status
        File.open(Rails.root.join('public', 'images', file_name), 'wb') do |file|
          file_status = file.write(upload_parameters.read)
        end
        if file_status != false
       	  imageBuildWorker = ImageBuildWorker.new
          imageBuildWorker.delay.perform(image_id, repo_credentials)
          return {"status" => true, "notice" => ""}
        else
          log("failed to save docker file to server, file name " + file_name, "error")
          return {"status" => false, "notice" => "Failed to save docker file to server"}
        end
      else
        log("failed to authenticate to Docker Hub " + file_name, "error")
        return {"status" => false, "notice" => "Authentication to docker hub failed"}
      end
    else
      return {"status" => false, "notice" => ""}
    end
  end

	# This method contains a bunch of methods all used to save a attribute of a model, in this case the status attribute of a Image.
	# Everyone of them does the same, but works in a slightly different way. I put them all together,
	# because the behaviour of them becomes very unpredictable when used in a background process. (the status not being saved sometimes.)
	# When used individually, i get inconsistent results. When used all together, i get a consistently good result (the status being saved).
	# Used by: image_build_worker.rb
	# * *Args*    :
	#   - +status+ -> the repository of the image. [Integer]
	# * *Returns* :
	#   - The status of the process of adding the image, and also a optional status message. [Hashmap]
	# * *Raises* :
	#   - Nothing 
    def force_update_status(status) #rails' behaviour when saving a attribute in a background thread is very weird and unpredictable..
  		self.update_attribute(:status , status)
  		self.update_attributes(:status => status)
  		self.status = status
  		self.save
    end
end
